#!/usr/bin/env ruby

## FIXME: Replace this code with a pure Ruby clone of the ls utility
# system("ls", *ARGV)
require "optparse"
require "etc"

# Intentionally keeping everything in the same file for simplicity. In prod version I'd split this into multiple files.
module RLs
  class Application
    def initialize(argv)
      @options, @args = parse_arguments(argv)
      @display = Display.new(@options)
    end

    def run
      if @args.empty?
        list_directory
      else
        @args.each { |path| list_single_entry(path) }
      end
    end

    private

    def list_directory(path = ".")
      entries = Dir.entries(path)
        .reject { |name| skip?(name) }
        .sort
        .map { |name| {:name => name, :stat => File.stat(path + "/" + name), :has_extended_attributes? => has_extended_attributes?(path + "/" + name) } }
      @display.render_entries(entries)
    end

    def list_single_entry(path)
      raise "#{path}: No such file or directory" unless File.exist?(path)
      
      if File.directory?(path)
       list_directory(path)
      else
        entry = {:name => path, :stat => File.stat(path), :has_extended_attributes? => has_extended_attributes?(path)}
        @display.render_entry(entry)
      end      
    end

    def skip?(name)
      @options[:list_all] ? false : name.start_with?(".")
    end

    def parse_arguments(argv)
      options = {}
      args = []
      parser = OptionParser.new

      parser.on("-l") { options[:list] = true }
      parser.on("-a") { options[:list_all] = true }
      args = parser.parse(argv)
      
      [options, args]
    end

    def has_extended_attributes?(name)
      `xattr -l "#{name}" 2>/dev/null`
      $?.success?
    end
  end

  # This class is responsible for rendering the entries in the correct format.
  class Display
    def initialize(options)
      @options = options
      @size_columt_width = 3
    end

    # Each entry is a hash with a :name and a :stat.
    def render_entries(entries)
      if @options[:list]
        list_stats = get_list_stats(entries)
        # Update size column width
        @size_columt_width = list_stats[:max_file_size].to_s.size + 1 # +1 for padding
        
        puts "total #{list_stats[:total_blocks]}"
      end

      entries.each do |entry|
        render_entry(entry)
      end
    end

    def render_entry(entry)
      if @options[:list]
        stat = entry[:stat]
        mode = mode_to_s(entry)
        uowner = Etc.getpwuid(stat.uid).name
        gowner = Etc.getgrgid(stat.gid).name.rjust(6)
        size = stat.size.to_s.rjust(@size_columt_width)
        mtime = stat.mtime.strftime("%b %d %H:%M")
        puts "#{mode} #{stat.nlink} #{uowner} #{gowner} #{size} #{mtime} #{entry[:name]}"
      else
        puts entry[:name]
      end
    end

    private

    def get_list_stats(entries)
      entries.reduce({ total_blocks: 0, max_file_size: 0 }) do |hash, entry|
        hash[:total_blocks] += entry[:stat].blocks
        hash[:max_file_size] = [hash[:max_file_size], entry[:stat].size].max
        hash
      end
    end

    def mode_to_s(entry)
      file_type = get_file_type(entry)
      permissions = mode_to_permissions_string(entry[:stat].mode)
      extended_attr = entry[:has_extended_attributes?] ? '@' : ''
      "#{file_type}#{permissions}#{extended_attr}"
    end

    def get_file_type(entry)
      # Get file type
      case
      when entry[:stat].directory? then 'd'
      when entry[:stat].symlink? then 'l'
      when entry[:stat].pipe? then 'p'
      when entry[:stat].socket? then 's'
      when entry[:stat].chardev? then 'c'
      when entry[:stat].blockdev? then 'b'
      else '-'
      end
    end

    def mode_to_permissions_string(mode)
      # Get permissions
      perms = ''
      # Owner permissions
      perms << (mode & 0o400 != 0 ? 'r' : '-')
      perms << (mode & 0o200 != 0 ? 'w' : '-')
      perms << (mode & 0o100 != 0 ? 'x' : '-')
      # Group permissions
      perms << (mode & 0o040 != 0 ? 'r' : '-')
      perms << (mode & 0o020 != 0 ? 'w' : '-')
      perms << (mode & 0o010 != 0 ? 'x' : '-')
      # Others permissions
      perms << (mode & 0o004 != 0 ? 'r' : '-')
      perms << (mode & 0o002 != 0 ? 'w' : '-')
      perms << (mode & 0o001 != 0 ? 'x' : '-')

      perms
    end
  end
end

begin
  RLs::Application.new(ARGV).run
rescue OptionParser::InvalidOption => e
  # Have to rewrite message to match ls formatting
  message = "invalid option -- #{e.args.map { |arg| arg.gsub('-', '') }.join(', ')}"
  abort "ls: #{message}\nusage: ls [-@ABCFGHILOPRSTUWXabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]"
rescue StandardError => e
  abort "ls: #{e.message}"
end 